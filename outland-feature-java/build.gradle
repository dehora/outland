buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
  }
}

apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'com.google.protobuf'

dependencies {
  compile project.libs.guava
  compile project.libs.gson
  compile project.libs.metrics_core
  compile project.libs.okhttp3
  compile project.libs.okhttp3log
  compile project.libs.rocksdb_jni
  compile project.libs.rxjava
  compile project.libs.protobuf3
  compile project.libs.protobuf3_util
  compile project.libs.slf4j

  testCompile project.libs.junit
  testCompile project.libs.logback_core
  testCompile project.libs.logback_classic
  testCompile project.libs.mockito_core
  testCompile project.libs.okhttp3mockwebserver
}

protobuf {
  generatedFilesBaseDir = "$projectDir/gen"
  protoc {
    artifact = project.libs.protoc
  }
}

clean {
  delete protobuf.generatedFilesBaseDir
}

idea {
  module {
    sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");
    sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/proto");
  }
}

idea {
  module {
    // no generatedSourceDirs: https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
  }
}

// shadowJar needs `mainClassName` to complete
//noinspection GroovyUnusedAssignment
mainClassName = "outland.feature.ClientMain"


javadoc {
  exclude "**/spike/**"
}

sourceJar {
  exclude "**/spike/**"
}

/*
* Shade our dependencies; rx, gson, guava and okhttp3 have no transitive
* dependencies to cascade into
*/
shadowJar {
  baseName = "outland-feature-java"

  classifier = "" // remove the default all suffix to name it like a regular lib jar

  relocate "com.google.common", "shadow.com.google.common"
  relocate "com.google.protobuf", "shadow.com.google.protobuf"
  relocate "google.protobuf", "shadow.google.protobuf"
  relocate "com.google.gson", "shadow.com.google.gson"
  relocate "com.google.thirdparty", "shadow.com.google.thirdparty"
  relocate "okhttp3", "shadow.okhttp3"
  relocate "okio", "shadow.okio"
  relocate "rx", "shadow.rx"

  /*
    todo: figure out how to shade rocksdb
    Shading produces an UnsatisfiedLinkError including when rocks-jni regular is on the classpath
    and the jar is shaded - removing the shaded jar lets the client work;
    relocate "org.rocksdb", "shadow.org.rocksdb"
 */
  exclude "org/rocksdb/**"

  /*
  slf4j is a left asa dependency to let client users control logging. And it tends to be stable
  so maybe worth taking a chance on.
   */
  exclude "org/slf4j/**"

  /*
  metrics is a left as a dependency as you can supply a MetricRegistry to the client. We might
  be better off exporting a fixed set of metrics to get rid of this. Hard to say, metrics is
  pretty stable.
   */
  exclude "com/codahale/**"

  exclude "net/dehora/outland/feature/spike/**"
  exclude "META-INF/maven/com.google.code.gson/**"
  exclude "META-INF/maven/com.google.guava/**"
  exclude "META-INF/maven/com.squareup.okhttp3/**"
  exclude "META-INF/maven/com.squareup.okio/**"
  exclude "META-INF/*.SF"
  exclude "META-INF/*.DSA"
  exclude "META-INF/*.RSA"
  exclude "rxjava.properties"
  exclude "HISTORY-JAVA.md"
}

/*
* Give the bintray task our shadow jar via `shadowedJar`. This has all its
* dependencies embedded and shaded.
*/
publishing {
  publications {
    shadowedJar(MavenPublication) {
      from components.shadow
      groupId project.group
      artifactId = project.name
      version = project.version

      artifact(sourceJar) {
      }
      artifact(javadocJar) {
      }
    }
  }
}

/*
 *
*/
bintray {
  user = project.hasProperty("bintray_user") ? project.property("bintray_user") :
    System.getenv('BINTRAY_USER')
  key = project.hasProperty("bintray_key") ? project.property("bintray_key") :
    System.getenv("BINTRAY_KEY")

  publications = ["shadowedJar"]
  dryRun = false
  publish = true

  pkg {
    repo = "maven"
    userOrg = "dehora"
    name = "outland-feature-java"
    desc = "Java client for Outland Features"
    websiteUrl = "https://dehora.github.io/outland/"
    issueTrackerUrl = "https://github.com/dehora/outland/issues"
    vcsUrl = "https://github.com/dehora/outland.git"
    licenses = ["Apache-2.0"]
    labels = ["outland", "java", "api"]
    publicDownloadNumbers = true

    //noinspection GroovyAssignabilityCheck
    version {
      name = project.version
      vcsTag = project.version
      attributes = [:]
      gpg {
        //noinspection GroovyAssignabilityCheck
        sign = true
        passphrase = project.hasProperty("bintray_gpg_passphrase") ?
          project.property("bintray_gpg_passphrase") : System.getenv("BINTRAY_GPG_PASSPHRASE")
      }
    }
  }
}
